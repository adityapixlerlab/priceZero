{"ast":null,"code":"import Regex from \"./Regex\";\nconst Validation = {\n  validateForm: (form, formErrors, validateFunc) => {\n    const errorObj = {};\n    Object.keys(formErrors).map(x => {\n      let refValue = null;\n      const msg = validateFunc(x, form[x], refValue);\n      if (msg) errorObj[x] = msg;\n    });\n    return errorObj;\n  },\n  resetPass: (name, value) => {\n    switch (name) {\n      case \"email\":\n        if (!value) return \"Email is Required\";else if (!Regex.EMAIL_REGEXP.test(value)) return \"Enter a valid email address\";else return \"\";\n\n      default:\n        return \"\";\n    }\n  },\n  loginForm: (name, value) => {\n    switch (name) {\n      case \"email\":\n        if (!value) return \"Email is Required\";else if (!Regex.EMAIL_REGEXP.test(value)) return \"Enter a valid email address\";else return \"\";\n\n      case \"password\":\n        if (!value) return \"Password is Required\";else return \"\";\n\n      default:\n        return \"\";\n    }\n  },\n  registerForm: (name, value) => {\n    switch (name) {\n      case \"email\":\n        if (!value) return \"Email is Required\";else if (!Regex.EMAIL_REGEXP.test(value)) return \"Enter a valid email address\";else return \"\";\n\n      case \"password\":\n        if (!value) return \"Password is Required\";else if (!Regex.PASSWORD_REGEX.test(value)) return \"Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and NO SPECIAL CHARACTERS \";else return \"\";\n\n      case \"name\":\n        if (!value) return \"Name is Required\";else if (!Regex.FULL_NAME_REGEX.test(value)) return \"Enter a valid name \";else return \"\";\n\n      case \"phone\":\n        if (!value) return \"Phone is Required\";else if (!Regex.MOBILE_REGEX.test(value)) return \"Please enter a valid phone number\";else return \"\";\n\n      case \"address\":\n        if (!value) return \"Address is Required\";else return \"\";\n\n      default:\n        return \"\";\n    }\n  },\n  changePasswordForm: (name, value) => {\n    switch (name) {\n      case \"newPass\":\n        if (!value) return \"Password is Required\";else if (!Regex.PASSWORD_REGEX.test(value)) return \"Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and NO SPECIAL CHARACTERS \";else return \"\";\n\n      case \"confirmPass\":\n        if (!value) return \"Password is Required\";else if (!Regex.PASSWORD_REGEX.test(value)) return \"Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and NO SPECIAL CHARACTERS \";else return \"\";\n\n      default:\n        return \"\";\n    }\n  },\n  updateProfile: (name, value) => {\n    switch (name) {\n      case \"email\":\n        if (!value) return \"Email is Required\";else if (!Regex.EMAIL_REGEXP.test(value)) return \"Enter a valid email address\";else return \"\";\n\n      case \"phone\":\n        if (!value) return \"phone is Required\";else if (!Regex.MOBILE_REGEX.test(value)) return \"Please enter a valid phone number\";else return \"\";\n\n      case \"name\":\n        if (!value) return \"name is Required\";else return \"\";\n\n      default:\n        return \"\";\n    }\n  },\n  addProduct: (name, value) => {\n    switch (name) {\n      case \"category\":\n        if (!value) return \"Category is Required\";else return \"\";\n\n      case \"title\":\n        if (!value) return \"Title is Required\";else return \"\";\n\n      case \"description\":\n        if (!value) return \"Description is Required\";else return \"\";\n\n      case \"address\":\n        if (!value) return \"Address is Required\";else return \"\";\n      // case \"photo[]\":\n      //   if (!value) return \"Photo is Required\";\n      //   else return \"\";\n\n      case \"phone\":\n        if (!value) return \"Phone is Required\";else if (!Regex.MOBILE_REGEX.test(value)) return \"Please enter a valid phone number\";else return \"\";\n\n      case \"email\":\n        if (!value) return \"Email is Required\";else if (!Regex.EMAIL_REGEXP.test(value)) return \"Enter a valid email address\";else return \"\";\n\n      default:\n        return \"\";\n    }\n  }\n};\nexport default Validation;","map":{"version":3,"sources":["/home/pixlerlab/Desktop/Test/product-app/src/helper/Validation.js"],"names":["Regex","Validation","validateForm","form","formErrors","validateFunc","errorObj","Object","keys","map","x","refValue","msg","resetPass","name","value","EMAIL_REGEXP","test","loginForm","registerForm","PASSWORD_REGEX","FULL_NAME_REGEX","MOBILE_REGEX","changePasswordForm","updateProfile","addProduct"],"mappings":"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","sourcesContent":["import Regex from \"./Regex\";\nconst Validation = {\n  validateForm: (form, formErrors, validateFunc) => {\n    const errorObj = {};\n    Object.keys(formErrors).map((x) => {\n      let refValue = null;\n      const msg = validateFunc(x, form[x], refValue);\n      if (msg) errorObj[x] = msg;\n    });\n    return errorObj;\n  },\n  resetPass: (name, value) => {\n    switch (name) {\n      case \"email\":\n        if (!value) return \"Email is Required\";\n        else if (!Regex.EMAIL_REGEXP.test(value)) return \"Enter a valid email address\";\n        else return \"\";\n      default:\n        return \"\";\n    }\n  },\n  loginForm: (name, value) => {\n    switch (name) {\n      case \"email\":\n        if (!value) return \"Email is Required\";\n        else if (!Regex.EMAIL_REGEXP.test(value)) return \"Enter a valid email address\";\n        else return \"\";\n      case \"password\":\n        if (!value) return \"Password is Required\";\n        else return \"\";\n      default:\n        return \"\";\n    }\n  },\n  registerForm: (name, value) => {\n    switch (name) {\n      case \"email\":\n        if (!value) return \"Email is Required\";\n        else if (!Regex.EMAIL_REGEXP.test(value)) return \"Enter a valid email address\";\n        else return \"\";\n      case \"password\":\n        if (!value) return \"Password is Required\";\n        else if (!Regex.PASSWORD_REGEX.test(value))\n          return \"Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and NO SPECIAL CHARACTERS \";\n        else return \"\";\n\n      case \"name\":\n        if (!value) return \"Name is Required\";\n        else if (!Regex.FULL_NAME_REGEX.test(value)) return \"Enter a valid name \";\n        else return \"\";\n      case \"phone\":\n        if (!value) return \"Phone is Required\";\n        else if (!Regex.MOBILE_REGEX.test(value)) return \"Please enter a valid phone number\";\n        else return \"\";\n      case \"address\":\n        if (!value) return \"Address is Required\";\n        else return \"\";\n      default:\n        return \"\";\n    }\n  },\n  changePasswordForm: (name, value) => {\n    switch (name) {\n      case \"newPass\":\n        if (!value) return \"Password is Required\";\n        else if (!Regex.PASSWORD_REGEX.test(value))\n          return \"Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and NO SPECIAL CHARACTERS \";\n        else return \"\";\n      case \"confirmPass\":\n        if (!value) return \"Password is Required\";\n        else if (!Regex.PASSWORD_REGEX.test(value))\n          return \"Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and NO SPECIAL CHARACTERS \";\n        else return \"\";\n      default:\n        return \"\";\n    }\n  },\n\n  updateProfile: (name, value) => {\n    switch (name) {\n      case \"email\":\n        if (!value) return \"Email is Required\";\n        else if (!Regex.EMAIL_REGEXP.test(value)) return \"Enter a valid email address\";\n        else return \"\";\n      case \"phone\":\n        if (!value) return \"phone is Required\";\n        else if (!Regex.MOBILE_REGEX.test(value)) return \"Please enter a valid phone number\";\n        else return \"\";\n      case \"name\":\n        if (!value) return \"name is Required\";\n        else return \"\";\n      default:\n        return \"\";\n    }\n  },\n\n  addProduct: (name, value) => {\n    switch (name) {\n      case \"category\":\n        if (!value) return \"Category is Required\";\n        else return \"\";\n      case \"title\":\n        if (!value) return \"Title is Required\";\n        else return \"\";\n      case \"description\":\n        if (!value) return \"Description is Required\";\n        else return \"\";\n      case \"address\":\n        if (!value) return \"Address is Required\";\n        else return \"\";\n      // case \"photo[]\":\n      //   if (!value) return \"Photo is Required\";\n      //   else return \"\";\n      case \"phone\":\n        if (!value) return \"Phone is Required\";\n        else if (!Regex.MOBILE_REGEX.test(value)) return \"Please enter a valid phone number\";\n        else return \"\";\n      case \"email\":\n        if (!value) return \"Email is Required\";\n        else if (!Regex.EMAIL_REGEXP.test(value)) return \"Enter a valid email address\";\n        else return \"\";\n      default:\n        return \"\";\n    }\n  },\n};\nexport default Validation;\n"]},"metadata":{},"sourceType":"module"}